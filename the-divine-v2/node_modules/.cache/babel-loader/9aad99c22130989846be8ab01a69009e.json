{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Anthony Vigliotta\\\\TheDivineV2\\\\the-divine-v2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _defineProperty from\"C:\\\\Users\\\\Anthony Vigliotta\\\\TheDivineV2\\\\the-divine-v2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _asyncToGenerator from\"C:\\\\Users\\\\Anthony Vigliotta\\\\TheDivineV2\\\\the-divine-v2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import React from'react';require(\"dotenv\").config();var Web3=require(\"web3\");var ethNetwork=\"https://mainnet.infura.io/v3/f614a724e563453f9105be481807abb3\";var web3=new Web3(new Web3.providers.HttpProvider(ethNetwork));var contractABI=require(\"./contract-abi.json\");var contractAddress=\"0xA3C2E31ad437742173706578748A223DdA95F019\";export var connectWallet=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var addressArray,obj;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!window.ethereum){_context.next=14;break;}_context.prev=1;_context.next=4;return window.ethereum.request({method:\"eth_requestAccounts\"});case 4:addressArray=_context.sent;obj={status:\"Wallet connected, change your wallet by entering Metamask ðŸ¦Š\",address:addressArray[0]};return _context.abrupt(\"return\",obj);case 9:_context.prev=9;_context.t0=_context[\"catch\"](1);return _context.abrupt(\"return\",{address:\"\",status:\"ðŸ˜¥ \"+_context.t0.message});case 12:_context.next=15;break;case 14:return _context.abrupt(\"return\",{address:\"\",status:/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"p\",null,\" \",\"\\uD83E\\uDD8A\",\" \",/*#__PURE__*/React.createElement(\"a\",_defineProperty({target:\"_blank\",href:\"https://metamask.io/download.html\",rel:\"noreferrer\"},\"rel\",\"noopener noreferrer\"),\"You must install Metamask, a virtual Ethereum wallet, in your browser.\")))});case 15:case\"end\":return _context.stop();}}},_callee,null,[[1,9]]);}));return function connectWallet(){return _ref.apply(this,arguments);};}();export var getCurrentWalletConnected=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var addressArray;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!window.ethereum){_context2.next=17;break;}_context2.prev=1;_context2.next=4;return window.ethereum.request({method:\"eth_accounts\"});case 4:addressArray=_context2.sent;if(!(addressArray.length>0)){_context2.next=9;break;}return _context2.abrupt(\"return\",{address:addressArray[0],status:\"Wallet connected, change your wallet by entering Metamask ðŸ¦Š\"});case 9:return _context2.abrupt(\"return\",{address:\"\",status:\"ðŸ¦Š Connect to Metamask using the top right button.\"});case 10:_context2.next=15;break;case 12:_context2.prev=12;_context2.t0=_context2[\"catch\"](1);return _context2.abrupt(\"return\",{address:\"\",status:\"ðŸ˜¥ \"+_context2.t0.message});case 15:_context2.next=18;break;case 17:return _context2.abrupt(\"return\",{address:\"\",status:/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"p\",null,\" \",\"\\uD83E\\uDD8A\",\" \",/*#__PURE__*/React.createElement(\"a\",_defineProperty({target:\"_blank\",href:\"https://metamask.io/download.html\",rel:\"noreferrer\"},\"rel\",\"noopener noreferrer\"),\"You must install Metamask, a virtual Ethereum wallet, in your browser.\")))});case 18:case\"end\":return _context2.stop();}}},_callee2,null,[[1,12]]);}));return function getCurrentWalletConnected(){return _ref2.apply(this,arguments);};}();export var totalSupply=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var updatedAddress,totalSupply;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:updatedAddress=web3.utils.toChecksumAddress(contractAddress);_context3.next=3;return new web3.eth.Contract(contractABI,updatedAddress);case 3:window.contract=_context3.sent;_context3.next=6;return window.contract.methods.totalSupply().call();case 6:totalSupply=_context3.sent;return _context3.abrupt(\"return\",totalSupply);case 8:case\"end\":return _context3.stop();}}},_callee3);}));return function totalSupply(){return _ref3.apply(this,arguments);};}();export var presaleMints=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(wallet){var updatedAddress,whitelistedTotal;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:updatedAddress=web3.utils.toChecksumAddress(contractAddress);_context4.next=3;return new web3.eth.Contract(contractABI,updatedAddress);case 3:window.contract=_context4.sent;console.log(\"WALLET\",wallet);_context4.next=7;return window.contract.methods.Whitelist(wallet).call();case 7:whitelistedTotal=_context4.sent;console.log(\"whitelistedTotal\",whitelistedTotal);return _context4.abrupt(\"return\",whitelistedTotal);case 10:case\"end\":return _context4.stop();}}},_callee4);}));return function presaleMints(_x){return _ref4.apply(this,arguments);};}();export var mintNFT=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(mintAmount,address){var updatedAddress,value,transactionParameters,txHash;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(address){_context5.next=2;break;}return _context5.abrupt(\"return\");case 2:console.log(\"CONTRACT ABI\",contractABI);updatedAddress=web3.utils.toChecksumAddress(contractAddress);_context5.next=6;return new web3.eth.Contract(contractABI,updatedAddress);case 6:window.contract=_context5.sent;console.log(\"window contract\",window.contract);console.log(\"mint amount\",mintAmount,web3.utils.toWei(\"0.08\"));value=String(mintAmount*web3.utils.toWei(\"0.08\"));console.log(\"value\",value,typeof value);//set up your Ethereum transaction\ntransactionParameters={to:updatedAddress,// Required except during contract publications.\nfrom:window.ethereum.selectedAddress,// must match user's active address.\nvalue:parseInt(web3.utils.toWei(\"0.08\",\"ether\")*mintAmount).toString(16),data:window.contract.methods.mint(mintAmount).encodeABI()//make call to NFT smart contract\n};//sign the transaction via Metamask\n_context5.prev=12;_context5.next=15;return window.ethereum.request({method:\"eth_sendTransaction\",params:[transactionParameters]});case 15:txHash=_context5.sent;return _context5.abrupt(\"return\",{success:true,status:\"âœ… Check out your transaction on Etherscan:\"+txHash});case 19:_context5.prev=19;_context5.t0=_context5[\"catch\"](12);return _context5.abrupt(\"return\",{success:false,status:\"ðŸ˜¥ Something went wrong: \"+_context5.t0.message});case 22:case\"end\":return _context5.stop();}}},_callee5,null,[[12,19]]);}));return function mintNFT(_x2,_x3){return _ref5.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/Users/Anthony Vigliotta/TheDivineV2/the-divine-v2/src/utils/interact.js"],"names":["React","require","config","Web3","ethNetwork","web3","providers","HttpProvider","contractABI","contractAddress","connectWallet","window","ethereum","request","method","addressArray","obj","status","address","message","getCurrentWalletConnected","length","totalSupply","updatedAddress","utils","toChecksumAddress","eth","Contract","contract","methods","call","presaleMints","wallet","console","log","Whitelist","whitelistedTotal","mintNFT","mintAmount","toWei","value","String","transactionParameters","to","from","selectedAddress","parseInt","toString","data","mint","encodeABI","params","txHash","success"],"mappings":"2hBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB,GAEA,GAAMC,CAAAA,IAAI,CAAGF,OAAO,CAAC,MAAD,CAApB,CACA,GAAMG,CAAAA,UAAU,CACd,+DADF,CAEA,GAAMC,CAAAA,IAAI,CAAG,GAAIF,CAAAA,IAAJ,CAAS,GAAIA,CAAAA,IAAI,CAACG,SAAL,CAAeC,YAAnB,CAAgCH,UAAhC,CAAT,CAAb,CAEA,GAAMI,CAAAA,WAAW,CAAGP,OAAO,CAAC,qBAAD,CAA3B,CACA,GAAMQ,CAAAA,eAAe,CAAG,4CAAxB,CAEA,MAAO,IAAMC,CAAAA,aAAa,0FAAG,4JACvBC,MAAM,CAACC,QADgB,gEAGID,CAAAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB,CACjDC,MAAM,CAAE,qBADyC,CAAxB,CAHJ,QAGjBC,YAHiB,eAMjBC,GANiB,CAMX,CACVC,MAAM,CAAE,8DADE,CAEVC,OAAO,CAAEH,YAAY,CAAC,CAAD,CAFX,CANW,iCAUhBC,GAVgB,0FAYhB,CACLE,OAAO,CAAE,EADJ,CAELD,MAAM,CAAE,MAAQ,YAAIE,OAFf,CAZgB,yEAkBlB,CACLD,OAAO,CAAE,EADJ,CAELD,MAAM,cACJ,6CACE,6BACG,GADH,gBAEK,GAFL,cAGE,yCACE,MAAM,CAAC,QADT,CAEE,IAAI,oCAFN,CAGE,GAAG,CAAC,YAHN,QAIM,qBAJN,2EAHF,CADF,CAHG,CAlBkB,sEAAH,kBAAbP,CAAAA,aAAa,0CAAnB,CAyCP,MAAO,IAAMU,CAAAA,yBAAyB,2FAAG,6JACnCT,MAAM,CAACC,QAD4B,mEAGRD,CAAAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB,CACjDC,MAAM,CAAE,cADyC,CAAxB,CAHQ,QAG7BC,YAH6B,qBAM/BA,YAAY,CAACM,MAAb,CAAsB,CANS,4DAO1B,CACLH,OAAO,CAAEH,YAAY,CAAC,CAAD,CADhB,CAELE,MAAM,CAAE,8DAFH,CAP0B,0CAY1B,CACLC,OAAO,CAAE,EADJ,CAELD,MAAM,CAAE,oDAFH,CAZ0B,gIAkB5B,CACLC,OAAO,CAAE,EADJ,CAELD,MAAM,CAAE,MAAQ,aAAIE,OAFf,CAlB4B,2EAwB9B,CACLD,OAAO,CAAE,EADJ,CAELD,MAAM,cACJ,6CACE,6BACG,GADH,gBAEK,GAFL,cAGE,yCACE,MAAM,CAAC,QADT,CAEE,IAAI,oCAFN,CAGE,GAAG,CAAC,YAHN,QAIM,qBAJN,2EAHF,CADF,CAHG,CAxB8B,yEAAH,kBAAzBG,CAAAA,yBAAyB,2CAA/B,CA+CP,MAAO,IAAME,CAAAA,WAAW,2FAAG,uKAEnBC,cAFmB,CAEFlB,IAAI,CAACmB,KAAL,CAAWC,iBAAX,CACrBhB,eADqB,CAFE,wBAMD,IAAIJ,CAAAA,IAAI,CAACqB,GAAL,CAASC,QAAb,CAAsBnB,WAAtB,CAAmCe,cAAnC,CANC,QAMzBZ,MAAM,CAACiB,QANkB,uCAQCjB,CAAAA,MAAM,CAACiB,QAAP,CAAgBC,OAAhB,CAAwBP,WAAxB,GAAsCQ,IAAtC,EARD,QAQnBR,WARmB,iDAUlBA,WAVkB,0DAAH,yEAAjB,CAaP,MAAO,IAAMS,CAAAA,YAAY,2FAAG,kBAAOC,MAAP,0JAEpBT,cAFoB,CAEHlB,IAAI,CAACmB,KAAL,CAAWC,iBAAX,CACrBhB,eADqB,CAFG,wBAMF,IAAIJ,CAAAA,IAAI,CAACqB,GAAL,CAASC,QAAb,CAAsBnB,WAAtB,CAAmCe,cAAnC,CANE,QAM1BZ,MAAM,CAACiB,QANmB,gBAQ1BK,OAAO,CAACC,GAAR,CAAY,QAAZ,CAAsBF,MAAtB,EAR0B,uBAUKrB,CAAAA,MAAM,CAACiB,QAAP,CAAgBC,OAAhB,CAAwBM,SAAxB,CAAkCH,MAAlC,EAA0CF,IAA1C,EAVL,QAUpBM,gBAVoB,gBAY1BH,OAAO,CAACC,GAAR,CAAY,kBAAZ,CAAgCE,gBAAhC,EAZ0B,iCAcnBA,gBAdmB,2DAAH,kBAAZL,CAAAA,YAAY,6CAAlB,CAiBP,MAAO,IAAMM,CAAAA,OAAO,2FAAG,kBAAOC,UAAP,CAAmBpB,OAAnB,+KAEhBA,OAFgB,mEAMrBe,OAAO,CAACC,GAAR,CAAY,cAAZ,CAA4B1B,WAA5B,EAEMe,cARe,CAQElB,IAAI,CAACmB,KAAL,CAAWC,iBAAX,CACrBhB,eADqB,CARF,wBAYG,IAAIJ,CAAAA,IAAI,CAACqB,GAAL,CAASC,QAAb,CAAsBnB,WAAtB,CAAmCe,cAAnC,CAZH,QAYrBZ,MAAM,CAACiB,QAZc,gBAcrBK,OAAO,CAACC,GAAR,CAAY,iBAAZ,CAA+BvB,MAAM,CAACiB,QAAtC,EAEAK,OAAO,CAACC,GAAR,CAAY,aAAZ,CAA2BI,UAA3B,CAAuCjC,IAAI,CAACmB,KAAL,CAAWe,KAAX,CAAiB,MAAjB,CAAvC,EAEMC,KAlBe,CAkBPC,MAAM,CAACH,UAAU,CAAGjC,IAAI,CAACmB,KAAL,CAAWe,KAAX,CAAiB,MAAjB,CAAd,CAlBC,CAoBrBN,OAAO,CAACC,GAAR,CAAY,OAAZ,CAAqBM,KAArB,CAA4B,MAAOA,CAAAA,KAAnC,EAEA;AACME,qBAvBe,CAuBS,CAC5BC,EAAE,CAAEpB,cADwB,CACR;AACpBqB,IAAI,CAAEjC,MAAM,CAACC,QAAP,CAAgBiC,eAFM,CAEW;AACvCL,KAAK,CAAEM,QAAQ,CAACzC,IAAI,CAACmB,KAAL,CAAWe,KAAX,CAAiB,MAAjB,CAAyB,OAAzB,EAAoCD,UAArC,CAAR,CAAyDS,QAAzD,CACL,EADK,CAHqB,CAM5BC,IAAI,CAAErC,MAAM,CAACiB,QAAP,CAAgBC,OAAhB,CACHoB,IADG,CACEX,UADF,EAEHY,SAFG,EAEU;AARY,CAvBT,CAkCrB;AAlCqB,0CAoCEvC,CAAAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB,CAC3CC,MAAM,CAAE,qBADmC,CAE3CqC,MAAM,CAAE,CAACT,qBAAD,CAFmC,CAAxB,CApCF,SAoCbU,MApCa,iDAwCZ,CACLC,OAAO,CAAE,IADJ,CAELpC,MAAM,CAAE,6CAA+CmC,MAFlD,CAxCY,iGA6CZ,CACLC,OAAO,CAAE,KADJ,CAELpC,MAAM,CAAE,4BAA8B,aAAME,OAFvC,CA7CY,0EAAH,kBAAPkB,CAAAA,OAAO,kDAAb","sourcesContent":["import React from 'react';\r\n\r\nrequire(\"dotenv\").config();\r\n\r\nconst Web3 = require(\"web3\");\r\nconst ethNetwork =\r\n  \"https://mainnet.infura.io/v3/f614a724e563453f9105be481807abb3\";\r\nconst web3 = new Web3(new Web3.providers.HttpProvider(ethNetwork));\r\n\r\nconst contractABI = require(\"./contract-abi.json\");\r\nconst contractAddress = \"0xA3C2E31ad437742173706578748A223DdA95F019\"\r\n\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"Wallet connected, change your wallet by entering Metamask ðŸ¦Š\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"ðŸ˜¥ \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            ðŸ¦Š{\" \"}\r\n            <a\r\n              target=\"_blank\"\r\n              href={`https://metamask.io/download.html`}\r\n              rel=\"noreferrer\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n          status: \"Wallet connected, change your wallet by entering Metamask ðŸ¦Š\",\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"ðŸ¦Š Connect to Metamask using the top right button.\",\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"ðŸ˜¥ \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            ðŸ¦Š{\" \"}\r\n            <a\r\n              target=\"_blank\"\r\n              href={`https://metamask.io/download.html`}\r\n              rel=\"noreferrer\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const totalSupply = async () => {\r\n\r\n  const updatedAddress = web3.utils.toChecksumAddress(\r\n    contractAddress\r\n  );\r\n\r\n  window.contract = await new web3.eth.Contract(contractABI, updatedAddress);\r\n\r\n  const totalSupply = await window.contract.methods.totalSupply().call();\r\n\r\n  return totalSupply;\r\n}\r\n\r\nexport const presaleMints = async (wallet) => {\r\n\r\n  const updatedAddress = web3.utils.toChecksumAddress(\r\n    contractAddress\r\n  );\r\n\r\n  window.contract = await new web3.eth.Contract(contractABI, updatedAddress);\r\n\r\n  console.log(\"WALLET\", wallet)\r\n\r\n  const whitelistedTotal = await window.contract.methods.Whitelist(wallet).call();\r\n\r\n  console.log(\"whitelistedTotal\", whitelistedTotal)\r\n\r\n  return whitelistedTotal;\r\n};\r\n\r\nexport const mintNFT = async (mintAmount, address) => {\r\n\r\n  if (!address) {\r\n    return;\r\n  }\r\n\r\n  console.log(\"CONTRACT ABI\", contractABI);\r\n\r\n  const updatedAddress = web3.utils.toChecksumAddress(\r\n    contractAddress\r\n  );\r\n\r\n  window.contract = await new web3.eth.Contract(contractABI, updatedAddress);\r\n\r\n  console.log(\"window contract\", window.contract);\r\n\r\n  console.log(\"mint amount\", mintAmount, web3.utils.toWei(\"0.08\"));\r\n\r\n  const value = String(mintAmount * web3.utils.toWei(\"0.08\"));\r\n\r\n  console.log(\"value\", value, typeof value);\r\n\r\n  //set up your Ethereum transaction\r\n  const transactionParameters = {\r\n    to: updatedAddress, // Required except during contract publications.\r\n    from: window.ethereum.selectedAddress, // must match user's active address.\r\n    value: parseInt(web3.utils.toWei(\"0.08\", \"ether\") * mintAmount).toString(\r\n      16\r\n    ),\r\n    data: window.contract.methods\r\n      .mint(mintAmount)\r\n      .encodeABI(), //make call to NFT smart contract\r\n  };\r\n\r\n  //sign the transaction via Metamask\r\n  try {\r\n    const txHash = await window.ethereum.request({\r\n      method: \"eth_sendTransaction\",\r\n      params: [transactionParameters],\r\n    });\r\n    return {\r\n      success: true,\r\n      status: \"âœ… Check out your transaction on Etherscan:\" + txHash,\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      status: \"ðŸ˜¥ Something went wrong: \" + error.message,\r\n    };\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}