{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anthony Vigliotta\\\\TheDivineV2\\\\the-divine-v2\\\\src\\\\utils\\\\interact.js\";\nimport React from 'react';\n\nrequire(\"dotenv\").config();\n\nconst Web3 = require(\"web3\");\n\nconst ethNetwork = \"https://mainnet.infura.io/v3/cc38006cf6de4b989870ea7c1983e9e6\";\nconst web3 = new Web3(new Web3.providers.HttpProvider(ethNetwork));\n\nconst contractABI = require(\"./contract-abi.json\");\n\nconst contractAddress = \"0x2A3fe90346a1eC447fF078cfD323F1A477DAa823\";\nexport const connectWallet = async () => {\n  console.log(\"HERE\");\n\n  if (window.ethereum) {\n    console.log(\"WIHNDOW\", window.ethereum);\n\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"ADDRESS\", addressArray);\n      const obj = {\n        status: \"Wallet connected, change your wallet by entering Metamask ðŸ¦Š\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      console.log(\"ERR\", err);\n      return {\n        address: \"\",\n        status: \"ðŸ˜¥ \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }\n      }, \" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n        target: \"_blank\",\n        href: `https://metamask.io/download.html`,\n        rel: \"noopener noreferrer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }\n      }, \"You must install Metamask, a virtual Ethereum wallet, in your browser.\")))\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"Wallet connected, change your wallet by entering Metamask ðŸ¦Š\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"ðŸ¦Š Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"ðŸ˜¥ \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }\n      }, \" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n        target: \"_blank\",\n        href: `https://metamask.io/download.html`,\n        rel: \"noopener noreferrer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }\n      }, \"You must install Metamask, a virtual Ethereum wallet, in your browser.\")))\n    };\n  }\n};\nexport const totalSupply = async () => {\n  const updatedAddress = web3.utils.toChecksumAddress(contractAddress);\n  window.contract = await new web3.eth.Contract(contractABI, updatedAddress);\n  const totalSupply = await window.contract.methods.totalSupply().call();\n  return totalSupply;\n};\nexport const mintNFT = async (mintAmount, address) => {\n  if (!address) {\n    return;\n  }\n\n  const updatedAddress = web3.utils.toChecksumAddress(contractAddress);\n  window.contract = await new web3.eth.Contract(contractABI, updatedAddress);\n  console.log(\"window contract\", window.contract);\n  console.log(\"mint amount\", mintAmount, web3.utils.toWei(\"0\")); // const value = String(mintAmount * web3.utils.toWei(\"0\"));\n  // console.log(\"value\", value, typeof value);\n  //set up your Ethereum transaction\n\n  const transactionParameters = {\n    to: updatedAddress,\n    // Required except during contract publications.\n    from: window.ethereum.selectedAddress,\n    // must match user's active address.\n    value: 0,\n    data: window.contract.methods.mintReserved(address, mintAmount).encodeABI() //make call to NFT smart contract\n\n  }; //sign the transaction via Metamask\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    return {\n      success: true,\n      status: \"âœ… Check out your transaction on Etherscan:\" + txHash\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"ðŸ˜¥ Something went wrong: \" + error.message\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/Anthony Vigliotta/TheDivineV2/the-divine-v2/src/utils/interact.js"],"names":["React","require","config","Web3","ethNetwork","web3","providers","HttpProvider","contractABI","contractAddress","connectWallet","console","log","window","ethereum","addressArray","request","method","obj","status","address","err","message","getCurrentWalletConnected","length","totalSupply","updatedAddress","utils","toChecksumAddress","contract","eth","Contract","methods","call","mintNFT","mintAmount","toWei","transactionParameters","to","from","selectedAddress","value","data","mintReserved","encodeABI","txHash","params","success","error"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nrequire(\"dotenv\").config();\r\n\r\nconst Web3 = require(\"web3\");\r\nconst ethNetwork =\r\n  \"https://mainnet.infura.io/v3/cc38006cf6de4b989870ea7c1983e9e6\";\r\nconst web3 = new Web3(new Web3.providers.HttpProvider(ethNetwork));\r\n\r\nconst contractABI = require(\"./contract-abi.json\");\r\nconst contractAddress = \"0x2A3fe90346a1eC447fF078cfD323F1A477DAa823\"\r\n\r\nexport const connectWallet = async () => {\r\n  console.log(\"HERE\")\r\n  if (window.ethereum) {\r\n    console.log(\"WIHNDOW\", window.ethereum)\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      console.log(\"ADDRESS\", addressArray)\r\n      const obj = {\r\n        status: \"Wallet connected, change your wallet by entering Metamask ðŸ¦Š\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      console.log(\"ERR\", err)\r\n      return {\r\n        address: \"\",\r\n        status: \"ðŸ˜¥ \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            ðŸ¦Š{\" \"}\r\n            <a\r\n              target=\"_blank\"\r\n              href={`https://metamask.io/download.html`}\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n          status: \"Wallet connected, change your wallet by entering Metamask ðŸ¦Š\",\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"ðŸ¦Š Connect to Metamask using the top right button.\",\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"ðŸ˜¥ \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            ðŸ¦Š{\" \"}\r\n            <a\r\n              target=\"_blank\"\r\n              href={`https://metamask.io/download.html`}\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const totalSupply = async () => {\r\n\r\n  const updatedAddress = web3.utils.toChecksumAddress(\r\n    contractAddress\r\n  );\r\n\r\n  window.contract = await new web3.eth.Contract(contractABI, updatedAddress);\r\n\r\n  const totalSupply = await window.contract.methods.totalSupply().call();\r\n\r\n  return totalSupply;\r\n}\r\n\r\nexport const mintNFT = async (mintAmount, address) => {\r\n\r\n  if (!address) {\r\n    return;\r\n  }\r\n\r\n  const updatedAddress = web3.utils.toChecksumAddress(\r\n    contractAddress\r\n  );\r\n\r\n  window.contract = await new web3.eth.Contract(contractABI, updatedAddress);\r\n\r\n  console.log(\"window contract\", window.contract);\r\n\r\n  console.log(\"mint amount\", mintAmount, web3.utils.toWei(\"0\"));\r\n\r\n  // const value = String(mintAmount * web3.utils.toWei(\"0\"));\r\n\r\n  // console.log(\"value\", value, typeof value);\r\n\r\n  //set up your Ethereum transaction\r\n  const transactionParameters = {\r\n    to: updatedAddress, // Required except during contract publications.\r\n    from: window.ethereum.selectedAddress, // must match user's active address.\r\n    value: 0,\r\n    data: window.contract.methods\r\n      .mintReserved(address, mintAmount)\r\n      .encodeABI(), //make call to NFT smart contract\r\n  };\r\n\r\n  //sign the transaction via Metamask\r\n  try {\r\n    const txHash = await window.ethereum.request({\r\n      method: \"eth_sendTransaction\",\r\n      params: [transactionParameters],\r\n    });\r\n    return {\r\n      success: true,\r\n      status: \"âœ… Check out your transaction on Etherscan:\" + txHash,\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      status: \"ðŸ˜¥ Something went wrong: \" + error.message,\r\n    };\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}